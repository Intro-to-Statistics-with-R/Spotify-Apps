[{"name":"app.R","content":"library(shiny)\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(glue)\n\nset.seed(7777)\ndat <- read_csv(\"https://www.dropbox.com/s/bc2u2vjm2dqyx0l/top_artists_spotify.csv?dl=1\")\n\ndat <- dat %>%\n  mutate(\n    Artist = factor(Artist),\n    Explicit = factor(Explicit),\n    Acoustic = factor(Acousticness > 0.5),\n    Live = factor(Liveness > 0.5),\n    TimeSignature = factor(TimeSignature),\n    Mode = factor(Mode)\n  ) %>%\n  select(\n    Name, Album, Artist, Acoustic, Danceability, Duration, Energy, Explicit, Live, Loudness, Mode, Speechiness, Tempo, TimeSignature, Valence\n  )\n\nmy_needs <- function(v1, v2, stat, v3) {\n  if (stat == \"counts\" & !is.factor(dat[[v1]])) {\n    \"Cannot compute category counts of non-categorical variable.\"\n  } else if (stat != \"counts\" & !is.numeric(dat[[v1]])) {\n    glue(\"Cannot compute {stat} of a non-numeric variable.\")\n  } else if (v2 != \"none\" && !is.factor(dat[[v2]])) {\n    \"Must use a categorical variable to separate observations into categories.\"\n  } else if (stat == \"correlation\" & (!is.numeric(dat[[v1]]) | !is.numeric(dat[[v3]]))) {\n    glue(\"Cannot compute correlation with a non-numeric variable.\")\n  }\n}\n\nui <- fluidPage(\n  titlePanel(\"Spotify Data Query\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"v1\", \"What variable would you like to summarize?\", choices = names(dat), selected = \"Danceability\"),\n      selectInput(\"stat\", \"What statistic would you like to calculate?\", \n                  choices = c(\"mean\", \"median\", \"std deviation\", \"IQR\", \"counts\", \"correlation\"), selected = \"mean\"),\n      selectInput(\"v2\", \"What variable would you like to group by?\", choices = c(\"none\", names(dat)), selected = \"none\"),\n      selectInput(\"v3\", \"What second variable would you like to use for correlation?\", choices = c(\"none\", names(dat)), selected = \"none\"),\n      actionButton(\"go\", \"Calculate\")\n    ),\n    mainPanel(tableOutput(\"summary\"))\n  )\n)\n\nserver <- function(input, output) {\n  res <- eventReactive(input$go, {\n    validate(\n      need(is.null(my_needs(input$v1, input$v2, input$stat, input$v3)), my_needs(input$v1, input$v2, input$stat, input$v3))\n    )\n    \n    if (input$stat == \"counts\" & input$v2 == \"none\") {\n      dat %>% tabyl(!!sym(input$v1))\n    } else if (input$stat == \"counts\") {\n      as.data.frame(table(dat[[input$v1]], dat[[input$v2]]))\n    } else {\n      my_func <- switch(input$stat,\n                        mean = mean,\n                        median = median,\n                        IQR = IQR,\n                        \"std deviation\" = sd,\n                        \"correlation\" = cor)\n      \n      if (input$v2 == \"none\") {\n        dat %>%\n          summarize_at(input$v1, my_func) %>%\n          mutate_if(is.numeric, ~round(.,2))\n      } else if (input$stat != \"correlation\") {\n        temp <- dat %>%\n          group_by(!!sym(input$v2)) %>%\n          summarize_at(input$v1, my_func) %>%\n          mutate_if(is.numeric, ~round(.,2))\n        \n        colnames(temp)[1] <- input$v2\n        temp\n      } else {\n        temp <- dat %>%\n          group_by(!!sym(input$v2)) %>%\n          select(input$v1, input$v3) %>%\n          nest()\n        \n        cors <- map_dbl(temp$data, ~cor(.x[[1]], .x[[2]], use = \"complete.obs\"))\n        \n        tibble(Category = temp[[1]], Correlation = cors)\n      }\n    }\n  })\n  \n  output$summary <- renderTable({ res() })\n}\n\nshinyApp(ui, server)\n","type":"text"}]
